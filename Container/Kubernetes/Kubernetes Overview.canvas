{
	"nodes":[
		{"id":"78132bf4bd4d870b","type":"group","x":-19903,"y":-9784,"width":11736,"height":8863,"color":"#ff00d4","label":"Security"},
		{"id":"dd698ab43f78f6f1","type":"group","x":-921,"y":-2939,"width":6352,"height":5614,"color":"3","label":"CR"},
		{"id":"7df4cec1afa3676f","type":"group","x":-12504,"y":-2481,"width":3831,"height":1396,"label":"Account"},
		{"id":"1f3fb7430d158b48","type":"group","x":-4473,"y":-4103,"width":2359,"height":783,"label":"Pod"},
		{"id":"d8ea75e3d5abeff3","type":"group","x":188,"y":-12720,"width":1211,"height":1123,"color":"#66fffc","label":"Other Worker Node"},
		{"id":"ca9fd09f17536f4c","type":"group","x":-7134,"y":-9724,"width":5627,"height":7966,"color":"#8fffe3","label":"Worker Node"},
		{"id":"efb2881a0786c157","type":"group","x":-7185,"y":-13414,"width":5353,"height":2951,"color":"#5cfff4","label":"Work Node"},
		{"id":"04d4c8132cbd91a4","type":"group","x":-12504,"y":-13508,"width":3459,"height":3023,"color":"#ff2e2e","label":"Master Node"},
		{"id":"73eae87fbd8b0a77","type":"group","x":-6782,"y":-8649,"width":4349,"height":2119,"color":"2","label":"Ingress"},
		{"id":"4846c221ac0c43cd","type":"group","x":-6969,"y":-4488,"width":5052,"height":1627,"color":"5","label":"Deployment"},
		{"id":"496b16a8fc56acf1","type":"group","x":-19748,"y":-8596,"width":4770,"height":1323,"label":"對kube API發出指令時，會經過的流程"},
		{"id":"ad755a9f1a8ffe35","type":"group","x":-4111,"y":-11330,"width":1726,"height":708,"label":"Pod"},
		{"id":"a6a6fa2aea91fade","type":"text","text":"","x":-18008,"y":-8584,"width":737,"height":271},
		{"id":"af43be6493158325","type":"text","text":"# 當你透過 kubectl 或其他方式向 Kubernetes API 發送請求（例如創建一個 Pod）時，流程如下：\n\n1. **認證（Authentication）**：確認你是誰。\n2. **授權（Authorization）**：確認你有權限這麼做。\n3. **Admission Control**：在這裡，Admission Controllers 介入，根據啟用的控制器進行驗證或修改。\n4. **持久化**：如果通過上述步驟，請求才會被存入 etcd。","x":-19721,"y":-9332,"width":2371,"height":433},
		{"id":"543f22a32ccc9e93","type":"file","file":"Container/Kubernetes/Custom Controller.md","x":2802,"y":-848,"width":1586,"height":1834,"color":"3"},
		{"id":"e393fe5fad75cda0","type":"file","file":"Container/Kubernetes/Kubernetes Operator.md","x":1329,"y":1012,"width":1408,"height":1590,"color":"3"},
		{"id":"ed45cf005f56ee89","type":"file","file":"Container/Kubernetes/Pod.md","x":-4004,"y":-11234,"width":499,"height":536,"color":"5"},
		{"id":"6b0041ad657e8520","type":"text","text":"# 將流量轉發到對應的 Pod\n### KubeProxy 會根據 Service 的要求，將流量轉發到對應的後端的 Pod","x":-5207,"y":-11264,"width":756,"height":328},
		{"id":"ade5d6b0c39c8de7","type":"file","file":"Container/Kubernetes/CRI (Container Runtime Interface).md","x":-4464,"y":-13207,"width":938,"height":602},
		{"id":"275b1c727331b577","type":"file","file":"Container/Kubernetes/Ingress.md","x":-6605,"y":-8526,"width":2692,"height":769,"color":"2"},
		{"id":"32c0f9a938a9dba5","type":"text","text":"# Ingress的工作流程\n## 1. 需要預先部署 Ingress Controller：\n* Ingress Controller是以 Pod 的形式存在的，負責監聽並處理流量(例如Nginx)。\n## 2. 建立 Ingress Resource\n* 如果 Cluster 有多個 Ingress Controller，就會在裡面加個 ingress.class 來指定某種 Controller 的種類來處理。\n* 不過一般來說，只有一個 Controller 的話，它會自己搞定所有 Ingress 資源。\n> 流量路由：外部流量到達 Ingress Controller，Controller 根據 Ingress Resource 的規則將流量轉發到對應的 Service，然後到達後端 Pod。","x":-6559,"y":-7559,"width":919,"height":890,"color":"1"},
		{"id":"854c3b2a31662f03","type":"file","file":"Container/Kubernetes/Node.md","x":-7012,"y":-9621,"width":1561,"height":642},
		{"id":"be1f4321d74ad128","type":"text","text":"# Deployment \n\n## 。Deployment 是 Kubernetes 中用於管理 Pod 的控制器，確保應用程式以期望的狀態運行。\n## 。它支援自動擴展、滾動更新和回滾功能。\n\n### 主要特性\n- **副本管理**：維護指定數量的 Pod 副本，自動替換失敗的 Pod。\n- **更新策略**：支援滾動更新（Rolling Update）和回滾到先前版本。\n- **聲明式配置**：通過 YAML 文件定義目標狀態，Kubernetes 自動實現。\n\n## 基本範例\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: example-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:latest","x":-6813,"y":-4334,"width":1308,"height":897},
		{"id":"43fddff5a5c687aa","type":"file","file":"Container/Kubernetes/ReplicaSet.md","x":-6958,"y":-2609,"width":1275,"height":569},
		{"id":"35a1dbcef406614f","type":"file","file":"Container/Kubernetes/Authorization - RBAC（Role-Based Access Control）.md","x":-11400,"y":-7996,"width":1407,"height":785},
		{"id":"9d3a45a1b4a40399","type":"file","file":"Container/Kubernetes/Cloud Controller Manager (可選).md","x":-12126,"y":-10895,"width":942,"height":311,"color":"6"},
		{"id":"6433a21420aab03d","type":"text","text":"Issue Repair Commands to API Server\n(Controller 發送修復指令給 API Server)","x":-10980,"y":-11594,"width":591,"height":135},
		{"id":"95365654f8a896d8","type":"file","file":"Container/Kubernetes/etcd.md","x":-10273,"y":-11249,"width":1123,"height":488,"color":"6"},
		{"id":"a50138bb6e92edba","type":"file","file":"Container/Kubernetes/Worker Node.md","x":-5467,"y":-14597,"width":1860,"height":1169,"color":"#85fdff"},
		{"id":"0e49e6993ee9bb06","type":"file","file":"Container/Kubernetes/Kube-Proxy.md","x":-6941,"y":-11604,"width":1354,"height":762},
		{"id":"8ac21fbf08c6b516","type":"file","file":"Container/Kubernetes/Kubelet.md","x":-7110,"y":-13232,"width":1111,"height":775},
		{"id":"5465f7f47671937a","type":"text","text":"Authorization - Node","x":-12814,"y":-7956,"width":681,"height":723},
		{"id":"2ccf34eb087e0d2a","type":"file","file":"Container/Kubernetes/Master Node.md","x":-11681,"y":-14608,"width":1754,"height":1080,"color":"#ff4747"},
		{"id":"c66b664e6e5ddade","type":"file","file":"Container/Kubernetes/Scheduler.md","x":-12417,"y":-13202,"width":1089,"height":850,"color":"#ff6161"},
		{"id":"f46982720af7d7be","type":"file","file":"Container/Kubernetes/Controller Manager.md","x":-12164,"y":-11882,"width":1009,"height":810,"color":"#ff6161"},
		{"id":"fe183aa9361518d7","type":"file","file":"Container/Kubernetes/ClusterRoleBinding.md","x":-13060,"y":-3762,"width":1749,"height":960},
		{"id":"9c3c9bc05bb5855e","type":"file","file":"Container/Kubernetes/ClusterRole.md","x":-13015,"y":-4947,"width":1602,"height":546},
		{"id":"9e55ab73f7d87c9d","type":"file","file":"Container/Kubernetes/User Account.md","x":-10584,"y":-2159,"width":1450,"height":746},
		{"id":"6a112bfb4e5d7e1b","type":"file","file":"Container/Kubernetes/attachments/Pasted image 20250310155322.png","x":-17491,"y":-13127,"width":4695,"height":2766},
		{"id":"d3adc34b23a8396c","type":"file","file":"Container/Kubernetes/API server.md","x":-10285,"y":-13301,"width":1126,"height":1578,"color":"#ff6161"},
		{"id":"7e39b32d62e9c659","type":"text","text":"### Scheduler 透過 API Server讀取 etcd 中 所有資源的狀態 ，然後再判斷要如何調度新Pod","x":-11152,"y":-13274,"width":666,"height":239},
		{"id":"2e264d3e215e1f14","type":"file","file":"Container/Kubernetes/Authorization.md","x":-14566,"y":-9472,"width":2343,"height":994},
		{"id":"79be9573249ace14","type":"file","file":"Container/Kubernetes/ServiceAccount.md","x":-12205,"y":-2326,"width":1292,"height":1074},
		{"id":"7e003b89b7b58323","type":"text","text":"Authorization - ABAC（Attribute-Based Access Control）","x":-14323,"y":-7908,"width":825,"height":603},
		{"id":"c88a49c73a278881","type":"file","file":"Container/Kubernetes/attachments/Pasted image 20250314014037.png","x":-19739,"y":-8575,"width":4730,"height":1263},
		{"id":"0318d8a7a5d928f9","type":"text","text":"# Admission Controller Webhook\n\n## Webhook 是一種通過 HTTP 回調（callback）與外部服務通信的機制。\n## 它允許我們透過自己寫一個API 來讓 Admission Controller 呼叫，等於把修改（Mutating）或驗證（Validating）邏輯外包給一個自定義的API，而不是依賴內建的控制器。\n### 你可以自己 寫API（用任何語言，例如 Go、Python 等），部署為一個 Web 服務，\n\n## ValidatingAdmissionWebhook\n\n ### 用於自定義資源的驗證邏輯\n  - Kubernetes 發送資源給你的服務，你的程式檢查資源並返回是否允許（Allow）或拒絕（Deny）。\n  - 典型用途：強制執行安全策略、檢查配置是否合規等。\n## MutatingAdmissionWebhook \n### 用於自定義資源的修改邏輯。\n- Kubernetes 會將請求的資源發送到你的 Webhook 服務，你的程式可以修改資源並返回結果。\n- 典型用途：注入 Sidecar 容器、添加標籤、設置默認值等。\n\n## Config\n\n```yaml\napiVersion: admissionregistration.k8s.io/v1\nkind: ValidatingWebhookConfiguration\nmetadata:\n  name: my-validating-webhook\nwebhooks:\n- name: validate.mycompany.com\n  clientConfig:\n    service:\n      name: webhook-service ==========================================================> API的位置\n      namespace: default\n      path: \"/validate\"  =============================================================> API的位置\n    caBundle: <base64-encoded-CA-cert>\n  rules:\n  - operations: [\"CREATE\", \"UPDATE\"]\n    apiGroups: [\"\"]\n    apiVersions: [\"v1\"]\n    resources: [\"pods\"]\n  admissionReviewVersions: [\"v1\"]\n```\n\n這個配置告訴 Kubernetes：「當有 Pod 的 CREATE 或 UPDATE 操作時，呼叫我指定的 Webhook 服務來驗證資源。」\n\n- **webhooks**: 定義了一個或多個 Webhook。\n- **clientConfig**: 告訴 Kubernetes 如何聯繫你的 Webhook 服務。\n- **rules**: 指定什麼時候觸發這個 Webhook（例如針對哪些資源和操作）。\n- **caBundle** 是 clientConfig 的一部分，它是一個 **Base64 編碼的 CA 憑證**（Certificate Authority Certificate）。\n  它的作用是讓 Kubernetes API Server **驗證 Webhook 服務的身份**，確保通信是安全的。","x":-18281,"y":-5663,"width":1112,"height":1540},
		{"id":"0cc8f97aec04e74b","type":"file","file":"Container/Kubernetes/Admission controller.md","x":-17996,"y":-6963,"width":2685,"height":1075},
		{"id":"68e62456bf2af3b3","type":"text","text":"","x":-17036,"y":-7605,"width":1126,"height":312},
		{"id":"c72804d1d1c813c9","type":"file","file":"Container/Kubernetes/attachments/Pasted image 20250310141045.png","x":-11362,"y":-18004,"width":7437,"height":3228},
		{"id":"626778c28d600b37","type":"file","file":"Container/Kubernetes/Service.md","x":-5518,"y":-5466,"width":1775,"height":674,"color":"6"},
		{"id":"962cc19e817c26fe","type":"text","text":"# Ingress 與 Service\n\n## Ingress 透過 **域名 (Host) 和路由 (Path)** 來決定將請求發送到哪個 Service，使得 **多個 Service 可以共用同一個外部 IP**，從而減少資源消耗並提供更靈活的訪問方式。\n\n#### 簡單來說，**Ingress 是 Kubernetes 集群的「大門」，Service 則是內部不同應用的「接待櫃檯」，Ingress 負責把外部訪問導向正確的 Service，Service 再負責將請求分發給對應的 Pod。**","x":-5806,"y":-6132,"width":1863,"height":421,"color":"6"},
		{"id":"fad9af0faf9b56fb","type":"file","file":"Container/Kubernetes/Ingress Controller.md","x":-5203,"y":-7486,"width":1561,"height":712,"color":"2"},
		{"id":"1fbae1bc4d7a5ea2","type":"text","text":"# Pod\n","x":-2597,"y":-3846,"width":402,"height":242,"color":"5"},
		{"id":"2805ed4d3ed4fe01","type":"text","text":"# Pod\n","x":-3115,"y":-3849,"width":394,"height":229,"color":"5"},
		{"id":"84877a61fb8de99a","type":"file","file":"Container/Kubernetes/attachments/Pasted image 20250310020546.png","x":-1149,"y":-7365,"width":6449,"height":3997},
		{"id":"06b51f6e9fa7bb09","type":"text","text":"# Ingress Controller 與 Ingress 的關係\n## Ingress 是規則，Ingress Controller 是執行者\n\n  - **Ingress** 只是一個 YAML 設定，定義哪些請求應該發送到哪個 Service。\n  - **Ingress Controller** 負責讀取 Ingress 規則，並實際處理外部請求，將流量轉發到對應的 Service。\n## Ingress 需要 Ingress Controller 才能運作\n  * 只有定義 Ingress 規則，請求並不會自動被處理，必須安裝一個 **Ingress Controller** \n    (如 NGINX Ingress Controller、Traefik、HAProxy、Istio Gateway 等)。\n  * Ingress Controller 會監聽 Kubernetes Ingress 資源，並根據定義的規則來配置負載均衡，確保請求能夠正確轉發。","x":-3740,"y":-8378,"width":1229,"height":736},
		{"id":"7043b07b045c358d","type":"file","file":"Container/Kubernetes/attachments/Pasted image 20250310124806.png","x":-3384,"y":-6257,"width":1864,"height":1630},
		{"id":"ea2a2fc061014f4b","type":"file","file":"Container/Kubernetes/Pod.md","x":-4458,"y":-3994,"width":1212,"height":554,"color":"5"},
		{"id":"bb7c3a9c4e54c397","type":"file","file":"Container/Kubernetes/Pod.md","x":-3424,"y":-11234,"width":471,"height":528,"color":"5"},
		{"id":"637d99934d33b4a0","type":"file","file":"Container/Kubernetes/Pod.md","x":-2883,"y":-11228,"width":446,"height":510,"color":"5"},
		{"id":"3cdcb62398ccaab7","type":"file","file":"Container/Kubernetes/Container Runtime (containerd).md","x":-3664,"y":-12457,"width":1361,"height":746},
		{"id":"d750ac27df2a9e81","type":"file","file":"Container/Kubernetes/CNI (Container Network Interface).md","x":-1116,"y":-11997,"width":989,"height":289},
		{"id":"70ab40a872bcf1e2","type":"file","file":"Container/Kubernetes/API Group.md","x":-967,"y":-9653,"width":2458,"height":1678},
		{"id":"1b453930b7a7f36e","type":"file","file":"Container/Kubernetes/API Version.md","x":-576,"y":-10560,"width":1323,"height":458},
		{"id":"0a02fbb1427cc8bc","type":"file","file":"Container/Kubernetes/attachments/controller.gif","x":-486,"y":-2919,"width":5199,"height":2021},
		{"id":"1b4b8cf832c17e07","type":"file","file":"Container/Kubernetes/Custom Resource Definition.md","x":-440,"y":-823,"width":1660,"height":1618,"color":"3"},
		{"id":"ad0f522dee08d8f6","type":"file","file":"Container/Kubernetes/Helm.md","x":-6471,"y":-1028,"width":1841,"height":2626},
		{"id":"4f3ec9f5706cca54","type":"file","file":"Container/Kubernetes/Persistent Volume.md","x":-2841,"y":-2508,"width":943,"height":653},
		{"id":"c16d71b48e0a9537","type":"file","file":"Container/Kubernetes/Persistent Volume Claim.md","x":-5435,"y":-2641,"width":1036,"height":704},
		{"id":"b2b4bc3152a3d15c","type":"text","text":"# **PV** 是實際的儲存資源，而 **PVC** 是用戶的需求聲明。\n# **PVC** 會根據需求自動匹配可用的 **PV**，實現動態綁定或靜態綁定。","x":-4106,"y":-2460,"width":1013,"height":356},
		{"id":"9910c5771bdcc1f7","type":"text","text":"# 兩者關係\n在 Kubernetes 中，**Pod** 是運行應用的最小單位，但 Pod 本身**不具備自我修復能力**，如果掛掉就需要手動重建。而 **Deployment** 則像是一個管理員，負責確保 Pod 的數量和狀態符合預期。\n\n當你定義一個 **Deployment**，它會自動創建並維護指定數量的 **Pod**，確保應用穩定運行。如果某個 Pod 失敗，Deployment 會**自動重建**新的 Pod 來補上。如果需要更新應用，Deployment 會執行**滾動更新**，逐步替換舊的 Pod，而不影響服務的可用性。此外，Deployment 也允許**水平擴展或縮減 Pod 數量**，確保應用能適應不同的流量需求。\n\n簡而言之，Pod 是應用的「執行單元」，而 Deployment 則是「管理機制」，確保應用穩定、高可用並且易於維護。","x":-5673,"y":-3259,"width":1054,"height":284,"color":"#00ffbf"},
		{"id":"5ec4126a603cdffd","type":"file","file":"Container/Kubernetes/Role.md","x":-9938,"y":-4973,"width":1654,"height":783},
		{"id":"91edabd93816ea76","type":"text","text":"Authorization - webhook","x":-9283,"y":-7958,"width":990,"height":572},
		{"id":"e34ecc01f14309d7","type":"file","file":"Container/Kubernetes/RoleBinding.md","x":-9895,"y":-3807,"width":1621,"height":955},
		{"id":"245d7960565c2d3b","type":"text","text":"# 為什麼需要兩種 Role，而不能只有一種 Role？\n\n### 簡單比喻\n## 把 **Role** 和 **ClusterRole** 想像成房間鑰匙與整棟大樓的鑰匙：\n- **Role** →「房間鑰匙」：只能開某個房間的門（某個命名空間），適合給普通住戶。\n- **ClusterRole** →「大樓鑰匙」：能開整棟樓的所有門（整個集群），適合給管理員。\n\n如果只用一種鑰匙：\n- 只能開特定房間（無法管理大樓內的公共設施）。\n- 或者能開所有房間（權限過大，增加安全風險）。\n\n\n## 1. 命名空間的隔離需求\nKubernetes 使用 **Namespace（命名空間）** 來隔離不同的應用、團隊或環境（例如 dev、prod）。如果只有一個 Role，無法限制權限只在特定命名空間內生效。\n### **例子**\n- 你希望 **團隊 A** 只能管理 `team-a` 命名空間的 Pod，但不能動 `team-b` 的資源。如果只有一個通用的 Role，可能無法限制範圍，導致團隊 A 誤操作其他團隊的資源。\n\n---\n## 2. Cluster級資源的管理\n有些 Kubernetes 資源（例如 **Node、PersistentVolume、Namespace**）是**Cluster級別**的，不屬於任何命名空間。如果只有 Role（只能作用於特定命名空間），那麼就無法管理這些集群級資源。\n### **例子**\n- 你希望某個使用者可以管理所有 Node。如果只使用 Role，就需要在每個命名空間內都定義權限，但 **Node 是集群級資源**，這樣做行不通。這時就需要 **ClusterRole**。\n\n---\n## 3. 權限管理的靈活性與安全性\n- 如果只有一種 Role，它要麼只能管理命名空間內的資源（無法管控Cluster級別的資源），要麼能管理所有東西（缺乏細粒度控制）。\n- Kubernetes 遵循 **最小權限原則（Least Privilege）**，只給使用者所需的最低權限。透過 **Role** 和 **ClusterRole** 的區分，可以更靈活地管理權限。\n\n### **例子**\n- 你希望某個開發者 **只能在 `dev` 命名空間內部署應用**，這時 **Role** 就夠了。\n- 如果用一個通用的 Role，可能會不小心給他 **整個集群的部署權限**，這就會有風險。\n\n","x":-11929,"y":-6814,"width":2789,"height":1371}
	],
	"edges":[
		{"id":"683fe8a64e96365d","fromNode":"be1f4321d74ad128","fromSide":"top","toNode":"626778c28d600b37","toSide":"bottom"},
		{"id":"58371ee024b10a99","fromNode":"626778c28d600b37","fromSide":"bottom","toNode":"ea2a2fc061014f4b","toSide":"top","label":"Pod「不一定」要使用Deployment管理\n也可以單獨存在"},
		{"id":"bb5c154f227f1885","fromNode":"ea2a2fc061014f4b","fromSide":"bottom","toNode":"4f3ec9f5706cca54","toSide":"top","label":"可共用Volume"},
		{"id":"f06a25d207dd3465","fromNode":"9910c5771bdcc1f7","fromSide":"left","toNode":"be1f4321d74ad128","toSide":"bottom"},
		{"id":"8ebe4abe4e3e0802","fromNode":"9910c5771bdcc1f7","fromSide":"right","toNode":"ea2a2fc061014f4b","toSide":"left"},
		{"id":"7439e855ee331901","fromNode":"626778c28d600b37","fromSide":"bottom","toNode":"2805ed4d3ed4fe01","toSide":"top"},
		{"id":"3102b4c1dd2afc4b","fromNode":"626778c28d600b37","fromSide":"bottom","toNode":"1fbae1bc4d7a5ea2","toSide":"top"},
		{"id":"b0884101be7677a2","fromNode":"2805ed4d3ed4fe01","fromSide":"bottom","toNode":"4f3ec9f5706cca54","toSide":"top"},
		{"id":"1c384e1f43718dcc","fromNode":"1fbae1bc4d7a5ea2","fromSide":"bottom","toNode":"4f3ec9f5706cca54","toSide":"top"},
		{"id":"d91ab0bc55a6b86a","fromNode":"962cc19e817c26fe","fromSide":"top","toNode":"73eae87fbd8b0a77","toSide":"bottom","toEnd":"none"},
		{"id":"e1fe66210fdf59c7","fromNode":"962cc19e817c26fe","fromSide":"right","toNode":"7043b07b045c358d","toSide":"left"},
		{"id":"b6232977f5a1f5b0","fromNode":"b2b4bc3152a3d15c","fromSide":"right","toNode":"4f3ec9f5706cca54","toSide":"left"},
		{"id":"59b0dab9c954cfef","fromNode":"b2b4bc3152a3d15c","fromSide":"left","toNode":"c16d71b48e0a9537","toSide":"right"},
		{"id":"3ea0937704f38275","fromNode":"8ac21fbf08c6b516","fromSide":"right","toNode":"ade5d6b0c39c8de7","toSide":"left","label":"通過CRI下指令"},
		{"id":"408de4f681cb54e7","fromNode":"ade5d6b0c39c8de7","fromSide":"bottom","toNode":"8ac21fbf08c6b516","toSide":"bottom","label":"Report Status & Logs"},
		{"id":"009fcafbb4d48ebc","fromNode":"ade5d6b0c39c8de7","fromSide":"right","toNode":"3cdcb62398ccaab7","toSide":"top"},
		{"id":"5023a9487f465426","fromNode":"efb2881a0786c157","fromSide":"right","toNode":"d750ac27df2a9e81","toSide":"left"},
		{"id":"071d9371968ab843","fromNode":"d750ac27df2a9e81","fromSide":"right","toNode":"d8ea75e3d5abeff3","toSide":"left"},
		{"id":"a0bc31a5b0d4b0f7","fromNode":"8ac21fbf08c6b516","fromSide":"left","toNode":"d3adc34b23a8396c","toSide":"right","label":"API Server 對 Kubelet 下指令\nKubelet 回傳 Work Node狀態"},
		{"id":"12a5941653663c28","fromNode":"3cdcb62398ccaab7","fromSide":"bottom","toNode":"ad755a9f1a8ffe35","toSide":"top","label":"Run Container"},
		{"id":"6d677d0547a757ca","fromNode":"0e49e6993ee9bb06","fromSide":"left","toNode":"d3adc34b23a8396c","toSide":"right","label":"KubeProxy 透過監聽  API Service 去得知其他Node的\n Service 和 Endpoint 狀態"},
		{"id":"c07203021f7fe40e","fromNode":"0e49e6993ee9bb06","fromSide":"right","toNode":"6b0041ad657e8520","toSide":"left"},
		{"id":"0f444f4dc1fb044b","fromNode":"c66b664e6e5ddade","fromSide":"right","toNode":"d3adc34b23a8396c","toSide":"left","label":"通知API Server調度結果"},
		{"id":"78244abe6639a546","fromNode":"d3adc34b23a8396c","fromSide":"left","toNode":"f46982720af7d7be","toSide":"top","label":"API Server Provide Cluster State to Controller\n(API Server 提供資源狀態 給 Controller)\n"},
		{"id":"bf0b1406636c5154","fromNode":"f46982720af7d7be","fromSide":"left","toNode":"6433a21420aab03d","toSide":"left"},
		{"id":"31ef3204c5c17d62","fromNode":"6433a21420aab03d","fromSide":"right","toNode":"d3adc34b23a8396c","toSide":"bottom"},
		{"id":"607e22be45fec72a","fromNode":"c66b664e6e5ddade","fromSide":"right","toNode":"7e39b32d62e9c659","toSide":"left"},
		{"id":"1a27d8254c621a3b","fromNode":"7e39b32d62e9c659","fromSide":"right","toNode":"d3adc34b23a8396c","toSide":"left"},
		{"id":"7c36100093680ec3","fromNode":"6b0041ad657e8520","fromSide":"right","toNode":"ad755a9f1a8ffe35","toSide":"left"},
		{"id":"0cfb728924d721ab","fromNode":"95365654f8a896d8","fromSide":"top","toNode":"d3adc34b23a8396c","toSide":"bottom","label":"etcd 被 API 存取"},
		{"id":"6d89de7c4232cc9a","fromNode":"626778c28d600b37","fromSide":"top","toNode":"962cc19e817c26fe","toSide":"bottom","toEnd":"none"},
		{"id":"d827291c32ff93f6","fromNode":"2e264d3e215e1f14","fromSide":"bottom","toNode":"5465f7f47671937a","toSide":"top"},
		{"id":"fe65b4f0c6b6e411","fromNode":"2e264d3e215e1f14","fromSide":"bottom","toNode":"35a1dbcef406614f","toSide":"top"},
		{"id":"53d948484e6935c5","fromNode":"2e264d3e215e1f14","fromSide":"bottom","toNode":"7e003b89b7b58323","toSide":"top"},
		{"id":"6cd10f06be99adb0","fromNode":"2e264d3e215e1f14","fromSide":"bottom","toNode":"91edabd93816ea76","toSide":"top"},
		{"id":"3f2bc2c1958e3028","fromNode":"35a1dbcef406614f","fromSide":"bottom","toNode":"245d7960565c2d3b","toSide":"top"},
		{"id":"2908c6e018c92c1d","fromNode":"fe183aa9361518d7","fromSide":"bottom","toNode":"7df4cec1afa3676f","toSide":"top"},
		{"id":"f03168f3ac3a8cb5","fromNode":"e34ecc01f14309d7","fromSide":"bottom","toNode":"7df4cec1afa3676f","toSide":"top"},
		{"id":"bc809cea0e05e463","fromNode":"245d7960565c2d3b","fromSide":"bottom","toNode":"9c3c9bc05bb5855e","toSide":"top"},
		{"id":"5324ac628d00b2ca","fromNode":"245d7960565c2d3b","fromSide":"bottom","toNode":"5ec4126a603cdffd","toSide":"top"},
		{"id":"3604fbe06aad70f8","fromNode":"5ec4126a603cdffd","fromSide":"bottom","toNode":"e34ecc01f14309d7","toSide":"top","label":"Binding"},
		{"id":"6503f0a93548d901","fromNode":"9c3c9bc05bb5855e","fromSide":"bottom","toNode":"fe183aa9361518d7","toSide":"top","label":"Binding"},
		{"id":"d2d7c4fa565db0af","fromNode":"2e264d3e215e1f14","fromSide":"left","toNode":"a6a6fa2aea91fade","toSide":"top"},
		{"id":"8a48b49bdc096178","fromNode":"0cc8f97aec04e74b","fromSide":"top","toNode":"68e62456bf2af3b3","toSide":"bottom"},
		{"id":"68a9a29a09791e30","fromNode":"1b453930b7a7f36e","fromSide":"bottom","toNode":"70ab40a872bcf1e2","toSide":"top","toEnd":"none"},
		{"id":"48dd9b71d88c4790","fromNode":"1b4b8cf832c17e07","fromSide":"right","toNode":"543f22a32ccc9e93","toSide":"left","toEnd":"none"},
		{"id":"78df4ceeb02b2074","fromNode":"1b4b8cf832c17e07","fromSide":"bottom","toNode":"e393fe5fad75cda0","toSide":"left"},
		{"id":"567bae4d90d75ed8","fromNode":"543f22a32ccc9e93","fromSide":"bottom","toNode":"e393fe5fad75cda0","toSide":"right"}
	]
}